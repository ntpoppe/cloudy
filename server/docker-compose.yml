name: cloudy

services:
  # ---------- DEV ----------
  api-dev:
    build:
      context: .
      dockerfile: src/Cloudy.API/Dockerfile
      target: dev
    env_file:
      - .env.dev
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: ${DB_CONNSTRING}
    volumes:
      - ./:/src
    depends_on:
      db-dev:
        condition: service_healthy
    ports:
      - "5170:8080"
    profiles: ["dev"]

  db-dev:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5434:5432"
    volumes:
      - pgdata-dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 3s
      timeout: 3s
      retries: 10
    profiles: ["dev"]

  # ---------- PROD ----------
  api-prod:
    build:
      context: .
      dockerfile: src/Cloudy.API/Dockerfile
      target: prod
    env_file:
      - .env.prod
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: ${DB_CONNSTRING}
      PROD_GUARD: ${PROD_GUARD}
    ports:
      - "8000:8080"
    depends_on:
      db-prod:
        condition: service_healthy
    read_only: true
    tmpfs:
      - /tmp
    restart: always
    profiles: ["prod"]

  db-prod:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5433:5432"
    volumes:
      - pgdata-prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    profiles: ["prod"]

volumes:
  pgdata-dev:
  pgdata-prod:


